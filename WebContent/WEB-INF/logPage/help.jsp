<%@ page language="java" contentType="text/html; charset=UTF-8"
	pageEncoding="UTF-8"%>
<%@ taglib prefix="portlet" uri="http://java.sun.com/portlet_2_0"%>
<portlet:defineObjects />
<form>
	<p>org.apache.log4j.PatternLayout</p>
	<p>
		パターンレイアウト<br />
		さて、これが真打ち。勝手に自分でレイアウトを決めてやることができる、とっても重要なレイアウトである。一番よく使うと言っても過言ではない。printf
		の編集フォーマットとか、Apache の CustomLog ディレクティブみたいに、「%t」とかの %
		で始まる１文字で、いろいろな要素をシンボル化して指定する。そういうエスケープ文字のリストはこうだ。
	</p>
	<table border="1">
		<tr>
			<th>ディレクティブ</th>
			<th>意味</th>
		</tr>
		<tr>
			<td>%c</td>
			<td>カテゴリー名。これは %c{1} という風に書けて、%c{1} だと一番「下の」
				レベル、jp.or.nurs.sug.log4j.test.child.TestChild なら、「TestChild」のみになる。</td>
		</tr>
		<tr>
			<td>%C</td>
			<td>ログを生成したクラス名（≠カテゴリー名）。これも %C{2} という風に書けて、 %C{2}
				だと一番「下の」レベルから２つ上にたどる。 jp.or.nurs.sug.log4j.test.child.TestChild
				クラスなら、「child.TestChild」になるわけだ。</td>
		</tr>
		<tr>
			<td>%d</td>
			<td>日付。これは %d{yyyy-MMM-dd HH:mm:ss,SSS} みたいに細かく書けるし、
				また、TTCCLayout で使ったシンボルを使って、 %d{ISO8601} みたいに書いても良い。</td>
		</tr>
		<tr>
			<td>%l</td>
			<td>以下３つはいわゆる「LocationInfo」と呼ばれる、「ソース上どこでログイベントが発生したか？」についてのレイアウト指定である。これらの情報は有益だが、通信系Appenderの場合は「いらない情報をわざわざネット越しに送る」ことになるとか、スタックフレームを参照するのでJVMによってはうまく動かないケースがないわけではないとか、そもそもスピードが遅いとか、いろいろと問題を抱えているログ要素である。だから、これらは独立して「出す／出さない」の設定が可能なことが多い。で、この「%l」は３つの「LocationInfo」をまとめて出すオプション指定である。たとえば、「jp.or.nurs.sug.log4j.test.TestLog4j.main(TestLog4j.java:18)」のような出力になる。
			</td>
		</tr>
		<tr>
			<td>%F</td>
			<td>ログを生成したソースファイル名。遅いぞ！と警告されている</td>
		</tr>
		<tr>
			<td>%L</td>
			<td>ログを生成した箇所のソースの行番号。遅いぞ！と警告されている</td>
		</tr>
		<tr>
			<td>%M</td>
			<td>ログを生成したメソッドの名前。遅いぞ！と警告されている</td>
		</tr>
		<tr style="COLOR: #ff0000;">
			<td>%m</td>
			<td>ログメッセージ。<b>JBoss固有のディレクティ(%s,%E)はメッセージとして扱う。</b></td>
		</tr>
		<tr>
			<td>%x</td>
			<td>ログが生成されたスレッドのNDC(ネスト化診断コンテキスト) を出力する。</td>
		</tr>
		<tr>
			<td>%X{key}</td>
			<td>その MDC(1.2)、プロパティ(1.3) に保存された key の値</td>
		</tr>
		<tr>
			<td>%n</td>
			<td>改行コードを生成する。\nじゃないわけである。</td>
		</tr>
		<tr>
			<td>%p</td>
			<td>ログレベル（FATALとかINFOとか）</td>
		</tr>
		<tr>
			<td>%r</td>
			<td>アプリケーションが開始してからの通算時間（ミリ秒）</td>
		</tr>
		<tr>
			<td>%t</td>
			<td>ログを生成したスレッド名</td>
		</tr>
		<tr>
			<td>%throwable{short}</td>
			<td>1.3で追加。これはレイアウト要素というよりも一種のスイッチである。例外をログメソッドに渡して Log4j
				を呼ぶと、デフォルトでは例外スタックトレースをすべて出力することになる。とはいえ、これは鬱陶しいケースも多い。なので、この「%throwable{short}」という表現をログフォーマットの末尾につけてやると、例外スタックトレースの最初の行だけを表示することになる。ちょっと動作が例外的なのが気になるが...</td>
		</tr>
		<tr>
			<td>%properties{プロパティ名}</td>
			<td>1.3で追加。ログイベントのプロパティ。使いかたは後述する。</td>
		</tr>
	</table>
	<p>
		変換フォーマット<br /> 変換パターン記号の % とアルファベットの間、すなわちログイベントのカテゴリー名を出力する「 %c
		」の場合は「 % 」と「 c
		」の間に、数字を入れることで、それぞれの出力を右詰で表示するのか、左詰で表示するのかを制御することが出来ます。例えば、「 %5p
		」とした場合、ログのイベントレベル（ DEBUG や ERROR など）が 5 文字を超えない場合は、左側に空白が足されます（右詰）。「
		%-5p 」とした場合は、イベントレベルが 5
		文字を超えない場合は、右側に空白が足されます（左詰）。この使い方について、次の表に簡単にまとめておきます。
	</p>
	<table border="1">
		<tr>
			<th>フォーマット例</th>
			<th>説明</th>
		</tr>
		<tr>
			<td>%10m</td>
			<td>右詰：出力文字列が 10 文字以下の場合、文字列の左側に空白が挿入される。</td>
		</tr>
		<tr>
			<td>%-10m</td>
			<td>左詰：出力文字列が 10 文字以下の場合、文字列の右側に空白が挿入される。</td>
		</tr>
		<tr>
			<td>%.10m</td>
			<td>出力文字列が 10 文字を超える場合、文字列の右から数えて 11 文字目以降の文字（先頭の文字）が切り取られる。</td>
		</tr>
		<tr>
			<td>%10.20m</td>
			<td>右詰：出力文字列が 10 文字以下の場合、文字列の左側に空白が挿入される。 出力文字列が 20
				文字を超える場合、文字列の右から数えて 21 文字目以降の文字（先頭の文字）が切り取られる。</td>
		</tr>
		<tr>
			<td>%-10.20m</td>
			<td>左詰：出力文字列が 10 文字以下の場合、文字列の右側に空白が挿入される。 出力文字列が 20
				文字を超える場合、文字列の右から数えて 21 文字目以降の文字（先頭の文字）が切り取られる。</td>
		</tr>
	</table>
</form>
